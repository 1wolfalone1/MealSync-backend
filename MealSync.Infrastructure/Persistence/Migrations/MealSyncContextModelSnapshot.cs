// <auto-generated />
using System;
using MealSync.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MealSync.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(MealSyncContext))]
    partial class MealSyncContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MealSync.Domain.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<int>("Genders")
                        .HasColumnType("int");

                    b.Property<int>("NumOfFlag")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "account_email_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "account_phone_number_unique")
                        .IsUnique();

                    b.ToTable("account");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.AccountFlag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TargetType")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("account_flag");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.AccountPermission", b =>
                {
                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("PermissionId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("moderator_permission");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Building", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DomitoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DomitoryId");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("building");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.CommissionConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("CommissionRate")
                        .HasColumnType("double");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("commission_config");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DormitoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DormitoryId");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.CustomerBuilding", b =>
                {
                    b.Property<long>("BuildingId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("BuildingId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("customer_building");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.DeliveryOrderCombination", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EndTime")
                        .HasColumnType("int");

                    b.Property<long>("StaffDeliveryId")
                        .HasColumnType("bigint");

                    b.Property<int>("StartTime")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StaffDeliveryId");

                    b.ToTable("delivery_order_combination");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Dormitory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("dormitory");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Favourite", b =>
                {
                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShopOwnerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CustomerId", "ShopOwnerId");

                    b.HasIndex("ShopOwnerId");

                    b.ToTable("favourtite");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("location");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Moderator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("moderator");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ModeratorActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionDetail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ModeratorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<int>("TargetType")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ModeratorId");

                    b.ToTable("moderator_activity_log");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ModeratorDormitory", b =>
                {
                    b.Property<long>("ModeratorId")
                        .HasColumnType("bigint");

                    b.Property<long>("DormitoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ModeratorId", "DormitoryId");

                    b.HasIndex("DormitoryId");

                    b.ToTable("moderator_dormitory");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ReferenceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("notification");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OperatingDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AbleTotalOrder")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<bool>("IsClose")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ShopOwnerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("operating_day");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OperatingFrame", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AbleTotalOrderHandle")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EndTime")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("OperatingDayId")
                        .HasColumnType("bigint");

                    b.Property<int>("StartTime")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OperatingDayId");

                    b.ToTable("operating_frame");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("BuildingId")
                        .HasColumnType("bigint");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("ChargeFee")
                        .HasColumnType("double");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerLocationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeliveryOrderCombinationId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeliverySuccessImageUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("EndTime")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("IntendedReceiveAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRefund")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReport")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("PromotionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("ReceiveAt")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("ShippingFee")
                        .HasColumnType("double");

                    b.Property<long>("ShopLocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShopOwnerId")
                        .HasColumnType("bigint");

                    b.Property<int>("StartTime")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.Property<double>("TotalPromotion")
                        .HasColumnType("double");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerLocationId")
                        .IsUnique();

                    b.HasIndex("DeliveryOrderCombinationId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("ShopLocationId")
                        .IsUnique();

                    b.HasIndex("ShopOwnerId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_detail");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OrderDetailOption", b =>
                {
                    b.Property<long>("OrderDetailId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToppingOptionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("OrderDetailId", "ToppingOptionId");

                    b.HasIndex("ToppingOptionId");

                    b.ToTable("order_detail_option");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OrderTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("PaymentMethods")
                        .HasColumnType("int");

                    b.Property<string>("PaymentThirdPartyContent")
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentThirdPartyId")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("order_transaction");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OrderTransactionHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderTransactionId")
                        .HasColumnType("bigint");

                    b.Property<int>("PaymentMethods")
                        .HasColumnType("int");

                    b.Property<string>("PaymentThirdPartyContent")
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentThirdPartyId")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("order_transaction_history");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("permission");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSoldOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<long>("ShopOwnerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalOrder")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ShopOwnerId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_category");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ProductOperatingHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EndTime")
                        .HasColumnType("int");

                    b.Property<long>("OperatingDayId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("StartTime")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OperatingDayId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_operating_hours");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ProductQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("topping_question");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ProductQuestionOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPricing")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("ToppingQuestionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ToppingQuestionId");

                    b.ToTable("topping_option");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Promotion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double?>("AmountRate")
                        .HasColumnType("double");

                    b.Property<double?>("AmountValue")
                        .HasColumnType("double");

                    b.Property<int>("ApplyType")
                        .HasColumnType("int");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("longtext");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Decription")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("MinOrdervalue")
                        .HasColumnType("double");

                    b.Property<int>("NumberOfUsed")
                        .HasColumnType("int");

                    b.Property<long?>("ShopOwnerId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShopOwnerId");

                    b.ToTable("promotion");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<long?>("ShopOwnerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StaffDeliveryId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShopOwnerId");

                    b.HasIndex("StaffDeliveryId");

                    b.ToTable("report");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("review");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("role");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ShopDormitory", b =>
                {
                    b.Property<long>("ShopOwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("DormitoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ShopOwnerId", "DormitoryId");

                    b.HasIndex("DormitoryId");

                    b.ToTable("shop_dormitory");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ShopOwner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("AdditionalShipFee")
                        .HasColumnType("double");

                    b.Property<int>("AverageOrderHandleInFrame")
                        .HasColumnType("int");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("BankCode")
                        .HasColumnType("longtext");

                    b.Property<string>("BankShortName")
                        .HasColumnType("longtext");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("longtext");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsAcceptingOrderNextDay")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("MaxOrderHoursInAdvance")
                        .HasColumnType("int");

                    b.Property<int>("MinOrderHoursInAdvance")
                        .HasColumnType("int");

                    b.Property<double>("MinValueOrderFreeShip")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalOrder")
                        .HasColumnType("int");

                    b.Property<int>("TotalProduct")
                        .HasColumnType("int");

                    b.Property<int>("TotalRating")
                        .HasColumnType("int");

                    b.Property<int>("TotalReview")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.HasIndex("WalletId")
                        .IsUnique();

                    b.ToTable("shop_owner");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.StaffDelivery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("ShopOwnerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ShopOwnerId");

                    b.ToTable("staff_delivery");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.SystemConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("system_config");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.SystemResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ResourceCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ResourceContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("system_resource");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.VerificationCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("ExpiredTịme")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("verification_code");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Wallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("AvailableAmount")
                        .HasColumnType("double");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("InComingAmount")
                        .HasColumnType("double");

                    b.Property<DateTimeOffset>("NextTransferDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("wallet");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.WalletHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("AvailableAmountAfter")
                        .HasColumnType("double");

                    b.Property<double>("AvailableAmountBefore")
                        .HasColumnType("double");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("InComingAmountAfter")
                        .HasColumnType("double");

                    b.Property<double>("InComingAmountBefore")
                        .HasColumnType("double");

                    b.Property<DateTimeOffset>("NextTransferDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Wallet_history");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.WalletTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("wallet_transaction");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.WithdrawalRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BankShortName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("withdrawal_request");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Account", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Account_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.AccountFlag", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithMany("AccountFlags")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.AccountPermission", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithMany("AccountPermissions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountPermission_Account");

                    b.HasOne("MealSync.Domain.Entities.Permission", "Permission")
                        .WithMany("AccountPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountPermission_Permission");

                    b.Navigation("Account");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Building", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Dormitory", "Dormitory")
                        .WithMany("Buildings")
                        .HasForeignKey("DomitoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Building_Dormitory");

                    b.HasOne("MealSync.Domain.Entities.Location", "Location")
                        .WithOne("Building")
                        .HasForeignKey("MealSync.Domain.Entities.Building", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Building_Location");

                    b.Navigation("Dormitory");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Customer", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Dormitory", "Dormitory")
                        .WithMany("Customers")
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Customer_Dormitory");

                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("MealSync.Domain.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Customer_Account");

                    b.Navigation("Account");

                    b.Navigation("Dormitory");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.CustomerBuilding", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Building", "Building")
                        .WithMany("CustomerBuildings")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CustomerBuilding_Building");

                    b.HasOne("MealSync.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerBuildings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CustomerBuilding_Customer");

                    b.Navigation("Building");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.DeliveryOrderCombination", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.StaffDelivery", "StaffDelivery")
                        .WithMany("DeliveryOrderCombinations")
                        .HasForeignKey("StaffDeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DeliveryOrderCombination_StaffDelivery");

                    b.Navigation("StaffDelivery");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Dormitory", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Location", "Location")
                        .WithOne("Dormitory")
                        .HasForeignKey("MealSync.Domain.Entities.Dormitory", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Dormitory_Location");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Favourite", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Customer", "Customer")
                        .WithMany("Favourites")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Favourite_Customer");

                    b.HasOne("MealSync.Domain.Entities.ShopOwner", "ShopOwner")
                        .WithMany("Favourites")
                        .HasForeignKey("ShopOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Favourite_ShopOwner");

                    b.Navigation("Customer");

                    b.Navigation("ShopOwner");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Moderator", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithOne("Moderator")
                        .HasForeignKey("MealSync.Domain.Entities.Moderator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Moderator_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ModeratorActivityLog", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Moderator", "Moderator")
                        .WithMany("ModeratorActivityLogs")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ModeratorActivityLog_Moderator");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ModeratorDormitory", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Dormitory", "Dormitory")
                        .WithMany("ModeratorDormitories")
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ModeratorDormitory_Dormitory");

                    b.HasOne("MealSync.Domain.Entities.Moderator", "Moderator")
                        .WithMany("ModeratorDormitories")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ModeratorDormitory_Moderator");

                    b.Navigation("Dormitory");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Notification", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Notification_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OperatingFrame", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.OperatingDay", "OperatingDay")
                        .WithMany("OperatingFrames")
                        .HasForeignKey("OperatingDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OperatingFrame_OperatingDay");

                    b.Navigation("OperatingDay");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Order", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Building", "Building")
                        .WithMany("Orders")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Building");

                    b.HasOne("MealSync.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Customer");

                    b.HasOne("MealSync.Domain.Entities.Location", "CustomerLocation")
                        .WithOne("OrderCustomer")
                        .HasForeignKey("MealSync.Domain.Entities.Order", "CustomerLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_CustomerLocation");

                    b.HasOne("MealSync.Domain.Entities.DeliveryOrderCombination", "DeliveryOrderCombination")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryOrderCombinationId")
                        .HasConstraintName("FK_Order_DeliveryOrderCombination");

                    b.HasOne("MealSync.Domain.Entities.Promotion", "Promotion")
                        .WithMany("Orders")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Promotion");

                    b.HasOne("MealSync.Domain.Entities.Location", "ShopLocation")
                        .WithOne("OrderShop")
                        .HasForeignKey("MealSync.Domain.Entities.Order", "ShopLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_ShopLocation");

                    b.HasOne("MealSync.Domain.Entities.ShopOwner", "ShopOwner")
                        .WithMany("Orders")
                        .HasForeignKey("ShopOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_ShopOwner");

                    b.Navigation("Building");

                    b.Navigation("Customer");

                    b.Navigation("CustomerLocation");

                    b.Navigation("DeliveryOrderCombination");

                    b.Navigation("Promotion");

                    b.Navigation("ShopLocation");

                    b.Navigation("ShopOwner");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.HasOne("MealSync.Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OrderDetailOption", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.OrderDetail", "OrderDetail")
                        .WithMany("OrderDetailOptions")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetailOption_OrderDetail");

                    b.HasOne("MealSync.Domain.Entities.ProductQuestionOption", "ProductQuestionOption")
                        .WithMany("OrderDetailOptions")
                        .HasForeignKey("ToppingOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetailOption_ToppingOption");

                    b.Navigation("OrderDetail");

                    b.Navigation("ProductQuestionOption");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OrderTransaction", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Order", "Order")
                        .WithMany("OrderTransactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderTransaction_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Product", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.ShopOwner", "ShopOwner")
                        .WithMany("Products")
                        .HasForeignKey("ShopOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Product_ShopOwner");

                    b.Navigation("ShopOwner");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategory_Category");

                    b.HasOne("MealSync.Domain.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategory_Product");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ProductOperatingHour", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.OperatingDay", "OperatingDay")
                        .WithMany("ProductOperatingHours")
                        .HasForeignKey("OperatingDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductOperatingHour_OperatingDay");

                    b.HasOne("MealSync.Domain.Entities.Product", "Product")
                        .WithMany("ProductOperatingHours")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductOperatingHour_Product");

                    b.Navigation("OperatingDay");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ProductQuestion", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Product", "Product")
                        .WithMany("ProductQuestions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductQuestion_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ProductQuestionOption", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.ProductQuestion", "ProductQuestion")
                        .WithMany("ProductQuestionOptions")
                        .HasForeignKey("ToppingQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ToppingOption_ToppingQuestion");

                    b.Navigation("ProductQuestion");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Promotion", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Customer", "Customer")
                        .WithMany("Promotions")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Promotion_Customer");

                    b.HasOne("MealSync.Domain.Entities.ShopOwner", "ShopOwner")
                        .WithMany("Promotions")
                        .HasForeignKey("ShopOwnerId")
                        .HasConstraintName("FK_Promotion_ShopOwner");

                    b.Navigation("Customer");

                    b.Navigation("ShopOwner");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Report", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Customer", "Customer")
                        .WithMany("Reports")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Report_Customer");

                    b.HasOne("MealSync.Domain.Entities.Order", "Order")
                        .WithMany("Reports")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Report_Order");

                    b.HasOne("MealSync.Domain.Entities.ShopOwner", "ShopOwner")
                        .WithMany("Reports")
                        .HasForeignKey("ShopOwnerId")
                        .HasConstraintName("FK_Report_ShopOwner");

                    b.HasOne("MealSync.Domain.Entities.StaffDelivery", "StaffDelivery")
                        .WithMany("Reports")
                        .HasForeignKey("StaffDeliveryId")
                        .HasConstraintName("FK_Report_StaffDelivery");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("ShopOwner");

                    b.Navigation("StaffDelivery");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Review", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Review_Customer");

                    b.HasOne("MealSync.Domain.Entities.Order", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Review_Order");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ShopDormitory", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Dormitory", "Dormitory")
                        .WithMany("ShopDormitories")
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopDormitory_Dormitory");

                    b.HasOne("MealSync.Domain.Entities.ShopOwner", "ShopOwner")
                        .WithMany("ShopDormitories")
                        .HasForeignKey("ShopOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopDormitory_ShopOwner");

                    b.Navigation("Dormitory");

                    b.Navigation("ShopOwner");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ShopOwner", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithOne("ShopOwner")
                        .HasForeignKey("MealSync.Domain.Entities.ShopOwner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopOwner_Account");

                    b.HasOne("MealSync.Domain.Entities.Location", "Location")
                        .WithOne("ShopOwner")
                        .HasForeignKey("MealSync.Domain.Entities.ShopOwner", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopOwner_Location");

                    b.HasOne("MealSync.Domain.Entities.Wallet", "Wallet")
                        .WithOne("ShopOwner")
                        .HasForeignKey("MealSync.Domain.Entities.ShopOwner", "WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopOwner_Wallet");

                    b.Navigation("Account");

                    b.Navigation("Location");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.StaffDelivery", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithOne("StaffDelivery")
                        .HasForeignKey("MealSync.Domain.Entities.StaffDelivery", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StaffDelivery_Account");

                    b.HasOne("MealSync.Domain.Entities.ShopOwner", "ShopOwner")
                        .WithMany("StaffDeliveries")
                        .HasForeignKey("ShopOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StaffDelivery_ShopOwner");

                    b.Navigation("Account");

                    b.Navigation("ShopOwner");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.VerificationCode", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithMany("VerificationCodes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Account_VerificationCode");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.WalletTransaction", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WalletTransaction_Wallet");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.WithdrawalRequest", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Wallet", "Wallet")
                        .WithMany("WithdrawalRequests")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WithdrawalRequest_Wallet");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Account", b =>
                {
                    b.Navigation("AccountFlags");

                    b.Navigation("AccountPermissions");

                    b.Navigation("Customer");

                    b.Navigation("Moderator");

                    b.Navigation("Notifications");

                    b.Navigation("ShopOwner");

                    b.Navigation("StaffDelivery");

                    b.Navigation("VerificationCodes");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Building", b =>
                {
                    b.Navigation("CustomerBuildings");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomerBuildings");

                    b.Navigation("Favourites");

                    b.Navigation("Orders");

                    b.Navigation("Promotions");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.DeliveryOrderCombination", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Dormitory", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Customers");

                    b.Navigation("ModeratorDormitories");

                    b.Navigation("ShopDormitories");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Location", b =>
                {
                    b.Navigation("Building")
                        .IsRequired();

                    b.Navigation("Dormitory")
                        .IsRequired();

                    b.Navigation("OrderCustomer")
                        .IsRequired();

                    b.Navigation("OrderShop")
                        .IsRequired();

                    b.Navigation("ShopOwner")
                        .IsRequired();
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Moderator", b =>
                {
                    b.Navigation("ModeratorActivityLogs");

                    b.Navigation("ModeratorDormitories");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OperatingDay", b =>
                {
                    b.Navigation("OperatingFrames");

                    b.Navigation("ProductOperatingHours");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("OrderTransactions");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OrderDetail", b =>
                {
                    b.Navigation("OrderDetailOptions");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Permission", b =>
                {
                    b.Navigation("AccountPermissions");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductOperatingHours");

                    b.Navigation("ProductQuestions");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ProductQuestion", b =>
                {
                    b.Navigation("ProductQuestionOptions");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ProductQuestionOption", b =>
                {
                    b.Navigation("OrderDetailOptions");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Promotion", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ShopOwner", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("Promotions");

                    b.Navigation("Reports");

                    b.Navigation("ShopDormitories");

                    b.Navigation("StaffDeliveries");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.StaffDelivery", b =>
                {
                    b.Navigation("DeliveryOrderCombinations");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("ShopOwner")
                        .IsRequired();

                    b.Navigation("WalletTransactions");

                    b.Navigation("WithdrawalRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
