// <auto-generated />
using System;
using MealSync.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MealSync.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(MealSyncContext))]
    [Migration("20241210065310_AddFixShopDormitory")]
    partial class AddFixShopDormitory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MealSync.Domain.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("avatar_url");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("longtext")
                        .HasColumnName("device_token");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("FUserId")
                        .HasColumnType("longtext")
                        .HasColumnName("f_user_id");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext")
                        .HasColumnName("full_name");

                    b.Property<int>("Genders")
                        .HasColumnType("int")
                        .HasColumnName("genders");

                    b.Property<int>("NumOfFlag")
                        .HasColumnType("int")
                        .HasColumnName("num_of_flag");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext")
                        .HasColumnName("refresh_token");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_account");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_account_role_id");

                    b.HasIndex(new[] { "Email" }, "account_email_unique")
                        .IsUnique()
                        .HasDatabaseName("ix_account_email");

                    b.HasIndex(new[] { "PhoneNumber" }, "account_phone_number_unique")
                        .IsUnique()
                        .HasDatabaseName("ix_account_phone_number");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.AccountFlag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<int>("ActionType")
                        .HasColumnType("int")
                        .HasColumnName("action_type");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("target_id");

                    b.Property<int>("TargetType")
                        .HasColumnType("int")
                        .HasColumnName("target_type");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_account_flag");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_account_flag_account_id");

                    b.ToTable("account_flag", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.AccountPermission", b =>
                {
                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("endpoint");

                    b.Property<int>("Method")
                        .HasColumnType("int")
                        .HasColumnName("method");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("PermissionId", "AccountId")
                        .HasName("pk_moderator_permission");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_moderator_permission_account_id");

                    b.ToTable("moderator_permission", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("ActionDetail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action_detail");

                    b.Property<int>("ActionType")
                        .HasColumnType("int")
                        .HasColumnName("action_type");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_success");

                    b.Property<long?>("TargetId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_id");

                    b.Property<int>("TargetType")
                        .HasColumnType("int")
                        .HasColumnName("target_type");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_activity_log");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_activity_log_account_id");

                    b.ToTable("activity_log", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Batch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("BatchCode")
                        .HasColumnType("int")
                        .HasColumnName("batch_code");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Parameter")
                        .HasColumnType("longtext")
                        .HasColumnName("parameter");

                    b.Property<DateTimeOffset>("ScheduledTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("scheduled_time");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_batch");

                    b.ToTable("batch", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.BatchHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("BatchCode")
                        .HasColumnType("int")
                        .HasColumnName("batch_code");

                    b.Property<long>("BatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("batch_id");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset>("EndDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date_time");

                    b.Property<string>("ErrorLog")
                        .HasColumnType("longtext")
                        .HasColumnName("error_log");

                    b.Property<string>("Parameter")
                        .HasColumnType("longtext")
                        .HasColumnName("parameter");

                    b.Property<DateTimeOffset>("StartDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date_time");

                    b.Property<int>("TotalRecord")
                        .HasColumnType("int")
                        .HasColumnName("total_record");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_batch_history");

                    b.ToTable("batch_history", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Building", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<long>("DormitoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("dormitory_id");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_building");

                    b.HasIndex("DormitoryId")
                        .HasDatabaseName("ix_building_dormitory_id");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasDatabaseName("ix_building_location_id");

                    b.ToTable("building", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.CommissionConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("CommissionRate")
                        .HasColumnType("double")
                        .HasColumnName("commission_rate");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_commission_config");

                    b.ToTable("commission_config", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_customer");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.CustomerBuilding", b =>
                {
                    b.Property<long>("BuildingId")
                        .HasColumnType("bigint")
                        .HasColumnName("building_id");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_default");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("BuildingId", "CustomerId")
                        .HasName("pk_customer_building");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_customer_building_customer_id");

                    b.ToTable("customer_building", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.DeliveryPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("date")
                        .HasColumnName("delivery_date");

                    b.Property<int>("EndTime")
                        .HasColumnType("int")
                        .HasColumnName("end_time");

                    b.Property<long?>("ShopDeliveryStaffId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_delivery_staff_id");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_id");

                    b.Property<int>("StartTime")
                        .HasColumnType("int")
                        .HasColumnName("start_time");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_delivery_package");

                    b.HasIndex("ShopDeliveryStaffId")
                        .HasDatabaseName("ix_delivery_package_shop_delivery_staff_id");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_delivery_package_shop_id");

                    b.ToTable("delivery_package", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Deposit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("amount");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("PaymentThirdPartyContent")
                        .HasColumnType("longtext")
                        .HasColumnName("payment_third_party_content");

                    b.Property<string>("PaymentThirdPartyId")
                        .HasColumnType("longtext")
                        .HasColumnName("payment_third_party_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id")
                        .HasName("pk_deposit");

                    b.HasIndex("WalletId")
                        .HasDatabaseName("ix_deposit_wallet_id");

                    b.ToTable("deposit", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Dormitory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_dormitory");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasDatabaseName("ix_dormitory_location_id");

                    b.ToTable("dormitory", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Favourite", b =>
                {
                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_id");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("CustomerId", "ShopId")
                        .HasName("pk_favourtite");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_favourtite_shop_id");

                    b.ToTable("favourtite", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Food", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<long?>("FoodPackingUnitId")
                        .HasColumnType("bigint")
                        .HasColumnName("food_packing_unit_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsSoldOut")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_sold_out");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<long>("PlatformCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("platform_category_id");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<long?>("ShopCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_category_id");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("TotalOrder")
                        .HasColumnType("int")
                        .HasColumnName("total_order");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_food");

                    b.HasIndex("FoodPackingUnitId")
                        .HasDatabaseName("ix_food_food_packing_unit_id");

                    b.HasIndex("PlatformCategoryId")
                        .HasDatabaseName("ix_food_platform_category_id");

                    b.HasIndex("ShopCategoryId")
                        .HasDatabaseName("ix_food_shop_category_id");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_food_shop_id");

                    b.ToTable("food", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.FoodOperatingSlot", b =>
                {
                    b.Property<long>("OperatingSlotId")
                        .HasColumnType("bigint")
                        .HasColumnName("operating_slot_id");

                    b.Property<long>("FoodId")
                        .HasColumnType("bigint")
                        .HasColumnName("food_id");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("OperatingSlotId", "FoodId")
                        .HasName("pk_food_operating_slot");

                    b.HasIndex("FoodId")
                        .HasDatabaseName("ix_food_operating_slot_food_id");

                    b.ToTable("food_operating_slot", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.FoodOptionGroup", b =>
                {
                    b.Property<long>("FoodId")
                        .HasColumnType("bigint")
                        .HasColumnName("food_id");

                    b.Property<long>("OptionGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("option_group_id");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("FoodId", "OptionGroupId")
                        .HasName("pk_food_option_group");

                    b.HasIndex("OptionGroupId")
                        .HasDatabaseName("ix_food_option_group_option_group_id");

                    b.ToTable("food_option_group", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.FoodPackingUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_id");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.Property<double>("Weight")
                        .HasColumnType("double")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_food_packing_unit");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_food_packing_unit_shop_id");

                    b.ToTable("food_packing_unit", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_location");

                    b.ToTable("location", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Moderator", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_moderator");

                    b.ToTable("moderator", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ModeratorDormitory", b =>
                {
                    b.Property<long>("ModeratorId")
                        .HasColumnType("bigint")
                        .HasColumnName("moderator_id");

                    b.Property<long>("DormitoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("dormitory_id");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("ModeratorId", "DormitoryId")
                        .HasName("pk_moderator_dormitory");

                    b.HasIndex("DormitoryId")
                        .HasDatabaseName("ix_moderator_dormitory_dormitory_id");

                    b.ToTable("moderator_dormitory", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<int>("EntityType")
                        .HasColumnType("int")
                        .HasColumnName("entity_type");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_read");

                    b.Property<long>("ReferenceId")
                        .HasColumnType("bigint")
                        .HasColumnName("reference_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_notification");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_notification_account_id");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OperatingSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<int>("EndTime")
                        .HasColumnType("int")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsReceivingOrderPaused")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_receiving_order_paused");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_id");

                    b.Property<int>("StartTime")
                        .HasColumnType("int")
                        .HasColumnName("start_time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_operating_slot");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_operating_slot_shop_id");

                    b.ToTable("operating_slot", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Option", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsCalculatePrice")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_calculate_price");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_default");

                    b.Property<long>("OptionGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("option_group_id");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_option");

                    b.HasIndex("OptionGroupId")
                        .HasDatabaseName("ix_option_option_group_id");

                    b.ToTable("option", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OptionGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsRequire")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_require");

                    b.Property<int>("MaxChoices")
                        .HasColumnType("int")
                        .HasColumnName("max_choices");

                    b.Property<int>("MinChoices")
                        .HasColumnType("int")
                        .HasColumnName("min_choices");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_option_group");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_option_group_shop_id");

                    b.ToTable("option_group", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BuildingId")
                        .HasColumnType("bigint")
                        .HasColumnName("building_id");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("building_name");

                    b.Property<DateTimeOffset?>("CancelAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("cancel_at");

                    b.Property<double>("ChargeFee")
                        .HasColumnType("double")
                        .HasColumnName("charge_fee");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("completed_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<long>("CustomerLocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_location_id");

                    b.Property<long?>("DeliveryPackageId")
                        .HasColumnType("bigint")
                        .HasColumnName("delivery_package_id");

                    b.Property<string>("DeliverySuccessImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("delivery_success_image_url");

                    b.Property<int>("EndTime")
                        .HasColumnType("int")
                        .HasColumnName("end_time");

                    b.Property<string>("EvidenceDeliveryFailJson")
                        .HasColumnType("longtext")
                        .HasColumnName("evidence_delivery_fail_json");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("full_name");

                    b.Property<DateTime>("IntendedReceiveDate")
                        .HasColumnType("date")
                        .HasColumnName("intended_receive_date");

                    b.Property<bool>("IsPaidToShop")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_paid_to_shop");

                    b.Property<bool>("IsRefund")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_refund");

                    b.Property<bool>("IsReport")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_report");

                    b.Property<DateTimeOffset?>("LastestDeliveryFailAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastest_delivery_fail_at");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("order_date");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<long?>("PromotionId")
                        .HasColumnType("bigint")
                        .HasColumnName("promotion_id");

                    b.Property<string>("QrScanToDeliveried")
                        .HasColumnType("text")
                        .HasColumnName("qr_scan_to_deliveried");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<string>("ReasonIdentity")
                        .HasColumnType("longtext")
                        .HasColumnName("reason_identity");

                    b.Property<DateTimeOffset?>("ReceiveAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("receive_at");

                    b.Property<DateTimeOffset?>("RejectAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reject_at");

                    b.Property<DateTimeOffset?>("ResolveAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("resolve_at");

                    b.Property<double>("ShippingFee")
                        .HasColumnType("double")
                        .HasColumnName("shipping_fee");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_id");

                    b.Property<long>("ShopLocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_location_id");

                    b.Property<int>("StartTime")
                        .HasColumnType("int")
                        .HasColumnName("start_time");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double")
                        .HasColumnName("total_price");

                    b.Property<double>("TotalPromotion")
                        .HasColumnType("double")
                        .HasColumnName("total_promotion");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_order");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("ix_order_building_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_order_customer_id");

                    b.HasIndex("CustomerLocationId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_customer_location_id");

                    b.HasIndex("DeliveryPackageId")
                        .HasDatabaseName("ix_order_delivery_package_id");

                    b.HasIndex("PromotionId")
                        .HasDatabaseName("ix_order_promotion_id");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_order_shop_id");

                    b.HasIndex("ShopLocationId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_shop_location_id");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("BasicPrice")
                        .HasColumnType("double")
                        .HasColumnName("basic_price");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("FoodId")
                        .HasColumnType("bigint")
                        .HasColumnName("food_id");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double")
                        .HasColumnName("total_price");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_order_detail");

                    b.HasIndex("FoodId")
                        .HasDatabaseName("ix_order_detail_food_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_detail_order_id");

                    b.ToTable("order_detail", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OrderDetailOption", b =>
                {
                    b.Property<long>("OrderDetailId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_detail_id");

                    b.Property<long>("OptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("option_id");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("OptionGroupTitle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("option_group_title");

                    b.Property<string>("OptionImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("option_image_url");

                    b.Property<string>("OptionTitle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("option_title");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("OrderDetailId", "OptionId")
                        .HasName("pk_order_detail_option");

                    b.HasIndex("OptionId")
                        .HasDatabaseName("ix_order_detail_option_option_id");

                    b.ToTable("order_detail_option", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("amount");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<int>("PaymentMethods")
                        .HasColumnType("int")
                        .HasColumnName("payment_methods");

                    b.Property<string>("PaymentThirdPartyContent")
                        .HasColumnType("longtext")
                        .HasColumnName("payment_third_party_content");

                    b.Property<string>("PaymentThirdPartyId")
                        .HasColumnType("longtext")
                        .HasColumnName("payment_third_party_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_payment");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_payment_order_id");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.PaymentHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("amount");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_id");

                    b.Property<int>("PaymentMethods")
                        .HasColumnType("int")
                        .HasColumnName("payment_methods");

                    b.Property<string>("PaymentThirdPartyContent")
                        .HasColumnType("longtext")
                        .HasColumnName("payment_third_party_content");

                    b.Property<string>("PaymentThirdPartyId")
                        .HasColumnType("longtext")
                        .HasColumnName("payment_third_party_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_payment_history");

                    b.ToTable("payment_history", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_permission");

                    b.ToTable("permission", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.PlatformCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_platform_category");

                    b.ToTable("platform_category", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Promotion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double?>("AmountRate")
                        .HasColumnType("double")
                        .HasColumnName("amount_rate");

                    b.Property<double?>("AmountValue")
                        .HasColumnType("double")
                        .HasColumnName("amount_value");

                    b.Property<int>("ApplyType")
                        .HasColumnType("int")
                        .HasColumnName("apply_type");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("banner_url");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<double?>("MaximumApplyValue")
                        .HasColumnType("double")
                        .HasColumnName("maximum_apply_value");

                    b.Property<double>("MinOrdervalue")
                        .HasColumnType("double")
                        .HasColumnName("min_ordervalue");

                    b.Property<int>("NumberOfUsed")
                        .HasColumnType("int")
                        .HasColumnName("number_of_used");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_id");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("int")
                        .HasColumnName("usage_limit");

                    b.HasKey("Id")
                        .HasName("pk_promotion");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_promotion_customer_id");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_promotion_shop_id");

                    b.ToTable("promotion", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("image_url");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<long?>("ShopDeliveryStaffId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_delivery_staff_id");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_report");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_report_customer_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_report_order_id");

                    b.HasIndex("ShopDeliveryStaffId")
                        .HasDatabaseName("ix_report_shop_delivery_staff_id");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_report_shop_id");

                    b.ToTable("report", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<int>("Entity")
                        .HasColumnType("int")
                        .HasColumnName("entity");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("image_url");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_id");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_review");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_review_customer_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_review_order_id");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_review_shop_id");

                    b.ToTable("review", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Shop", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<double>("AdditionalShipFee")
                        .HasColumnType("double")
                        .HasColumnName("additional_ship_fee");

                    b.Property<string>("BankAccountName")
                        .HasColumnType("longtext")
                        .HasColumnName("bank_account_name");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("bank_account_number");

                    b.Property<string>("BankCode")
                        .HasColumnType("longtext")
                        .HasColumnName("bank_code");

                    b.Property<string>("BankShortName")
                        .HasColumnType("longtext")
                        .HasColumnName("bank_short_name");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("banner_url");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsAcceptingOrderNextDay")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_accepting_order_next_day");

                    b.Property<bool>("IsAutoOrderConfirmation")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_auto_order_confirmation");

                    b.Property<bool>("IsReceivingOrderPaused")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_receiving_order_paused");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("location_id");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("logo_url");

                    b.Property<double?>("MaxCarryWeight")
                        .HasColumnType("double")
                        .HasColumnName("max_carry_weight");

                    b.Property<double>("MaxOrderHoursInAdvance")
                        .HasColumnType("double")
                        .HasColumnName("max_order_hours_in_advance");

                    b.Property<double>("MinOrderHoursInAdvance")
                        .HasColumnType("double")
                        .HasColumnName("min_order_hours_in_advance");

                    b.Property<double>("MinValueOrderFreeShip")
                        .HasColumnType("double")
                        .HasColumnName("min_value_order_free_ship");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("NumOfWarning")
                        .HasColumnType("int")
                        .HasColumnName("num_of_warning");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("TotalFood")
                        .HasColumnType("int")
                        .HasColumnName("total_food");

                    b.Property<int>("TotalOrder")
                        .HasColumnType("int")
                        .HasColumnName("total_order");

                    b.Property<int>("TotalRating")
                        .HasColumnType("int")
                        .HasColumnName("total_rating");

                    b.Property<int>("TotalReview")
                        .HasColumnType("int")
                        .HasColumnName("total_review");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id")
                        .HasName("pk_shop");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasDatabaseName("ix_shop_location_id");

                    b.HasIndex("WalletId")
                        .IsUnique()
                        .HasDatabaseName("ix_shop_wallet_id");

                    b.ToTable("shop", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ShopCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_id");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_shop_category");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_shop_category_shop_id");

                    b.ToTable("shop_category", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ShopDeliveryStaff", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_shop_delivery_staff");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_shop_delivery_staff_shop_id");

                    b.ToTable("shop_delivery_staff", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ShopDormitory", b =>
                {
                    b.Property<long>("ShopId")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_id");

                    b.Property<long>("DormitoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("dormitory_id");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<double>("Distance")
                        .HasColumnType("double")
                        .HasColumnName("distance");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("ShopId", "DormitoryId")
                        .HasName("pk_shop_dormitory");

                    b.HasIndex("DormitoryId")
                        .HasDatabaseName("ix_shop_dormitory_dormitory_id");

                    b.ToTable("shop_dormitory", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.SystemConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<int>("MaxFlagsBeforeBan")
                        .HasColumnType("int")
                        .HasColumnName("max_flags_before_ban");

                    b.Property<int>("MaxWarningBeforeInscreaseFlag")
                        .HasColumnType("int")
                        .HasColumnName("max_warning_before_inscrease_flag");

                    b.Property<int>("TimeFrameDuration")
                        .HasColumnType("int")
                        .HasColumnName("time_frame_duration");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_system_config");

                    b.ToTable("system_config", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.SystemResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("ResourceCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("resource_code");

                    b.Property<string>("ResourceContent")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("resource_content");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int")
                        .HasColumnName("resource_type");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_system_resource");

                    b.ToTable("system_resource", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Wallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("AvailableAmount")
                        .HasColumnType("double")
                        .HasColumnName("available_amount");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<double>("IncomingAmount")
                        .HasColumnType("double")
                        .HasColumnName("incoming_amount");

                    b.Property<DateTimeOffset>("NextTransferDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("next_transfer_date");

                    b.Property<double>("ReportingAmount")
                        .HasColumnType("double")
                        .HasColumnName("reporting_amount");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_wallet");

                    b.ToTable("wallet", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.WalletTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("amount");

                    b.Property<double>("AvaiableAmountBefore")
                        .HasColumnType("double")
                        .HasColumnName("avaiable_amount_before");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<long?>("DepositId")
                        .HasColumnType("bigint")
                        .HasColumnName("deposit_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double>("IncomingAmountBefore")
                        .HasColumnType("double")
                        .HasColumnName("incoming_amount_before");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_id");

                    b.Property<double>("ReportingAmountBefore")
                        .HasColumnType("double")
                        .HasColumnName("reporting_amount_before");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.Property<long?>("WalletFromId")
                        .HasColumnType("bigint")
                        .HasColumnName("wallet_from_id");

                    b.Property<long?>("WalletToId")
                        .HasColumnType("bigint")
                        .HasColumnName("wallet_to_id");

                    b.Property<long?>("WithdrawalRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("withdrawal_request_id");

                    b.HasKey("Id")
                        .HasName("pk_wallet_transaction");

                    b.HasIndex("DepositId")
                        .HasDatabaseName("ix_wallet_transaction_deposit_id");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_wallet_transaction_payment_id");

                    b.HasIndex("WalletFromId")
                        .HasDatabaseName("ix_wallet_transaction_wallet_from_id");

                    b.HasIndex("WalletToId")
                        .HasDatabaseName("ix_wallet_transaction_wallet_to_id");

                    b.HasIndex("WithdrawalRequestId")
                        .IsUnique()
                        .HasDatabaseName("ix_wallet_transaction_withdrawal_request_id");

                    b.ToTable("wallet_transaction", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.WithdrawalRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("amount");

                    b.Property<string>("BankAccountName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("bank_account_name");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("bank_account_number");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("bank_code");

                    b.Property<string>("BankShortName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("bank_short_name");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id")
                        .HasName("pk_withdrawal_request");

                    b.HasIndex("WalletId")
                        .HasDatabaseName("ix_withdrawal_request_wallet_id");

                    b.ToTable("withdrawal_request", (string)null);
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Account", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Account_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.AccountFlag", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithMany("AccountFlags")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_flag_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.AccountPermission", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithMany("AccountPermissions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountPermission_Account");

                    b.HasOne("MealSync.Domain.Entities.Permission", "Permission")
                        .WithMany("AccountPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountPermission_Permission");

                    b.Navigation("Account");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ActivityLog", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ActivityLog_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Building", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Dormitory", "Dormitory")
                        .WithMany("Buildings")
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Building_Dormitory");

                    b.HasOne("MealSync.Domain.Entities.Location", "Location")
                        .WithOne("Building")
                        .HasForeignKey("MealSync.Domain.Entities.Building", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Building_Location");

                    b.Navigation("Dormitory");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Customer", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("MealSync.Domain.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Customer_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.CustomerBuilding", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Building", "Building")
                        .WithMany("CustomerBuildings")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CustomerBuilding_Building");

                    b.HasOne("MealSync.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerBuildings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CustomerBuilding_Customer");

                    b.Navigation("Building");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.DeliveryPackage", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.ShopDeliveryStaff", "ShopDeliveryStaff")
                        .WithMany("DeliveryPackages")
                        .HasForeignKey("ShopDeliveryStaffId")
                        .HasConstraintName("FK_DeliveryPackage_ShopDeliveryStaff");

                    b.HasOne("MealSync.Domain.Entities.Shop", "Shop")
                        .WithMany("DeliveryPackages")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("fk_delivery_package_shop_shop_id");

                    b.Navigation("Shop");

                    b.Navigation("ShopDeliveryStaff");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Deposit", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Wallet", "Wallet")
                        .WithMany("Deposits")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Deposit_Wallet");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Dormitory", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Location", "Location")
                        .WithOne("Dormitory")
                        .HasForeignKey("MealSync.Domain.Entities.Dormitory", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Dormitory_Location");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Favourite", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Customer", "Customer")
                        .WithMany("Favourites")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Favourite_Customer");

                    b.HasOne("MealSync.Domain.Entities.Shop", "Shop")
                        .WithMany("Favourites")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Favourite_Shop");

                    b.Navigation("Customer");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Food", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.FoodPackingUnit", "FoodPackingUnit")
                        .WithMany("Foods")
                        .HasForeignKey("FoodPackingUnitId")
                        .HasConstraintName("FK_Food_FoodPackingUnit");

                    b.HasOne("MealSync.Domain.Entities.PlatformCategory", "PlatformCategory")
                        .WithMany("Foods")
                        .HasForeignKey("PlatformCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Food_PlatformCategory");

                    b.HasOne("MealSync.Domain.Entities.ShopCategory", "ShopCategory")
                        .WithMany("Foods")
                        .HasForeignKey("ShopCategoryId")
                        .HasConstraintName("FK_Food_ShopCategory");

                    b.HasOne("MealSync.Domain.Entities.Shop", "Shop")
                        .WithMany("Foods")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Food_Shop");

                    b.Navigation("FoodPackingUnit");

                    b.Navigation("PlatformCategory");

                    b.Navigation("Shop");

                    b.Navigation("ShopCategory");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.FoodOperatingSlot", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Food", "Food")
                        .WithMany("FoodOperatingSlots")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FoodOperatingSlot_Food");

                    b.HasOne("MealSync.Domain.Entities.OperatingSlot", "OperatingSlot")
                        .WithMany("FoodOperatingSlots")
                        .HasForeignKey("OperatingSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FoodOperatingSlot_OperatingSlot");

                    b.Navigation("Food");

                    b.Navigation("OperatingSlot");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.FoodOptionGroup", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Food", "Food")
                        .WithMany("FoodOptionGroups")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FoodOptionGroup_Food");

                    b.HasOne("MealSync.Domain.Entities.OptionGroup", "OptionGroup")
                        .WithMany("FoodOptionGroups")
                        .HasForeignKey("OptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FoodOptionGroup_OptionGroup");

                    b.Navigation("Food");

                    b.Navigation("OptionGroup");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.FoodPackingUnit", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Shop", "Shop")
                        .WithMany("FoodPackingUnits")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_FoodPackingUnit_Shop");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Moderator", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithOne("Moderator")
                        .HasForeignKey("MealSync.Domain.Entities.Moderator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Moderator_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ModeratorDormitory", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Dormitory", "Dormitory")
                        .WithMany("ModeratorDormitories")
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ModeratorDormitory_Dormitory");

                    b.HasOne("MealSync.Domain.Entities.Moderator", "Moderator")
                        .WithMany("ModeratorDormitories")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ModeratorDormitory_Moderator");

                    b.Navigation("Dormitory");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Notification", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Notification_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OperatingSlot", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Shop", "Shop")
                        .WithMany("OperatingSlots")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OperatingSlot_Shop");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Option", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.OptionGroup", "OptionGroup")
                        .WithMany("Options")
                        .HasForeignKey("OptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Option_OptionGroup");

                    b.Navigation("OptionGroup");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OptionGroup", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Shop", "Shop")
                        .WithMany("OptionGroups")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OptionGroup_Shop");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Order", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Building", "Building")
                        .WithMany("Orders")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Building");

                    b.HasOne("MealSync.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Customer");

                    b.HasOne("MealSync.Domain.Entities.Location", "CustomerLocation")
                        .WithOne("OrderCustomer")
                        .HasForeignKey("MealSync.Domain.Entities.Order", "CustomerLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_CustomerLocation");

                    b.HasOne("MealSync.Domain.Entities.DeliveryPackage", "DeliveryPackage")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryPackageId")
                        .HasConstraintName("FK_Order_DeliveryPackage");

                    b.HasOne("MealSync.Domain.Entities.Promotion", "Promotion")
                        .WithMany("Orders")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_Order_Promotion");

                    b.HasOne("MealSync.Domain.Entities.Shop", "Shop")
                        .WithMany("Orders")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Shop");

                    b.HasOne("MealSync.Domain.Entities.Location", "ShopLocation")
                        .WithOne("OrderShop")
                        .HasForeignKey("MealSync.Domain.Entities.Order", "ShopLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_ShopLocation");

                    b.Navigation("Building");

                    b.Navigation("Customer");

                    b.Navigation("CustomerLocation");

                    b.Navigation("DeliveryPackage");

                    b.Navigation("Promotion");

                    b.Navigation("Shop");

                    b.Navigation("ShopLocation");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Food", "Food")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Food");

                    b.HasOne("MealSync.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OrderDetailOption", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Option", "Option")
                        .WithMany("OrderDetailOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetailOption_Option");

                    b.HasOne("MealSync.Domain.Entities.OrderDetail", "OrderDetail")
                        .WithMany("OrderDetailOptions")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetailOption_OrderDetail");

                    b.Navigation("Option");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Payment", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Promotion", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Customer", "Customer")
                        .WithMany("Promotions")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Promotion_Customer");

                    b.HasOne("MealSync.Domain.Entities.Shop", "Shop")
                        .WithMany("Promotions")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_Promotion_Shop");

                    b.Navigation("Customer");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Report", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Customer", "Customer")
                        .WithMany("Reports")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Report_Customer");

                    b.HasOne("MealSync.Domain.Entities.Order", "Order")
                        .WithMany("Reports")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Report_Order");

                    b.HasOne("MealSync.Domain.Entities.ShopDeliveryStaff", "ShopDeliveryStaff")
                        .WithMany("Reports")
                        .HasForeignKey("ShopDeliveryStaffId")
                        .HasConstraintName("FK_Report_ShopDeliveryStaff");

                    b.HasOne("MealSync.Domain.Entities.Shop", "Shop")
                        .WithMany("Reports")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_Report_Shop");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Shop");

                    b.Navigation("ShopDeliveryStaff");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Review", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Review_Customer");

                    b.HasOne("MealSync.Domain.Entities.Order", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Review_Order");

                    b.HasOne("MealSync.Domain.Entities.Shop", "Shop")
                        .WithMany("ReviewReplys")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_Review_Shop");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Shop", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithOne("Shop")
                        .HasForeignKey("MealSync.Domain.Entities.Shop", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Shop_Account");

                    b.HasOne("MealSync.Domain.Entities.Location", "Location")
                        .WithOne("Shop")
                        .HasForeignKey("MealSync.Domain.Entities.Shop", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Shop_Location");

                    b.HasOne("MealSync.Domain.Entities.Wallet", "Wallet")
                        .WithOne("Shop")
                        .HasForeignKey("MealSync.Domain.Entities.Shop", "WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Shop_Wallet");

                    b.Navigation("Account");

                    b.Navigation("Location");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ShopCategory", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Shop", "Shop")
                        .WithMany("ShopCategories")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopCategory_Shop");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ShopDeliveryStaff", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Account", "Account")
                        .WithOne("ShopDeliveryStaff")
                        .HasForeignKey("MealSync.Domain.Entities.ShopDeliveryStaff", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopDeliveryStaff_Account");

                    b.HasOne("MealSync.Domain.Entities.Shop", "Shop")
                        .WithMany("ShopDeliveryStaffs")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopDeliveryStaff_Shop");

                    b.Navigation("Account");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ShopDormitory", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Dormitory", "Dormitory")
                        .WithMany("ShopDormitories")
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopDormitory_Dormitory");

                    b.HasOne("MealSync.Domain.Entities.Shop", "Shop")
                        .WithMany("ShopDormitories")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopDormitory_Shop");

                    b.Navigation("Dormitory");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.WalletTransaction", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Deposit", "Deposit")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("DepositId")
                        .HasConstraintName("FK_WalletTransaction_Deposit");

                    b.HasOne("MealSync.Domain.Entities.Payment", "Payment")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_WalletTransaction_Payment");

                    b.HasOne("MealSync.Domain.Entities.Wallet", "WalletFrom")
                        .WithMany("WalletTransactionFroms")
                        .HasForeignKey("WalletFromId")
                        .HasConstraintName("FK_WalletTransaction_WalletFrom");

                    b.HasOne("MealSync.Domain.Entities.Wallet", "WalletTo")
                        .WithMany("WalletTransactionTos")
                        .HasForeignKey("WalletToId")
                        .HasConstraintName("FK_WalletTransaction_WalletTo");

                    b.HasOne("MealSync.Domain.Entities.WithdrawalRequest", "WithdrawalRequest")
                        .WithOne("WalletTransaction")
                        .HasForeignKey("MealSync.Domain.Entities.WalletTransaction", "WithdrawalRequestId")
                        .HasConstraintName("FK_WalletTransaction_WithdrawalRequest");

                    b.Navigation("Deposit");

                    b.Navigation("Payment");

                    b.Navigation("WalletFrom");

                    b.Navigation("WalletTo");

                    b.Navigation("WithdrawalRequest");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.WithdrawalRequest", b =>
                {
                    b.HasOne("MealSync.Domain.Entities.Wallet", "Wallet")
                        .WithMany("WithdrawalRequests")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WithdrawalRequest_Wallet");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Account", b =>
                {
                    b.Navigation("AccountFlags");

                    b.Navigation("AccountPermissions");

                    b.Navigation("ActivityLogs");

                    b.Navigation("Customer");

                    b.Navigation("Moderator");

                    b.Navigation("Notifications");

                    b.Navigation("Shop");

                    b.Navigation("ShopDeliveryStaff");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Building", b =>
                {
                    b.Navigation("CustomerBuildings");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomerBuildings");

                    b.Navigation("Favourites");

                    b.Navigation("Orders");

                    b.Navigation("Promotions");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.DeliveryPackage", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Deposit", b =>
                {
                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Dormitory", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("ModeratorDormitories");

                    b.Navigation("ShopDormitories");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Food", b =>
                {
                    b.Navigation("FoodOperatingSlots");

                    b.Navigation("FoodOptionGroups");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.FoodPackingUnit", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Location", b =>
                {
                    b.Navigation("Building")
                        .IsRequired();

                    b.Navigation("Dormitory")
                        .IsRequired();

                    b.Navigation("OrderCustomer")
                        .IsRequired();

                    b.Navigation("OrderShop")
                        .IsRequired();

                    b.Navigation("Shop")
                        .IsRequired();
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Moderator", b =>
                {
                    b.Navigation("ModeratorDormitories");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OperatingSlot", b =>
                {
                    b.Navigation("FoodOperatingSlots");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Option", b =>
                {
                    b.Navigation("OrderDetailOptions");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OptionGroup", b =>
                {
                    b.Navigation("FoodOptionGroups");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.OrderDetail", b =>
                {
                    b.Navigation("OrderDetailOptions");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Payment", b =>
                {
                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Permission", b =>
                {
                    b.Navigation("AccountPermissions");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.PlatformCategory", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Promotion", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Shop", b =>
                {
                    b.Navigation("DeliveryPackages");

                    b.Navigation("Favourites");

                    b.Navigation("FoodPackingUnits");

                    b.Navigation("Foods");

                    b.Navigation("OperatingSlots");

                    b.Navigation("OptionGroups");

                    b.Navigation("Orders");

                    b.Navigation("Promotions");

                    b.Navigation("Reports");

                    b.Navigation("ReviewReplys");

                    b.Navigation("ShopCategories");

                    b.Navigation("ShopDeliveryStaffs");

                    b.Navigation("ShopDormitories");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ShopCategory", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.ShopDeliveryStaff", b =>
                {
                    b.Navigation("DeliveryPackages");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("Deposits");

                    b.Navigation("Shop");

                    b.Navigation("WalletTransactionFroms");

                    b.Navigation("WalletTransactionTos");

                    b.Navigation("WithdrawalRequests");
                });

            modelBuilder.Entity("MealSync.Domain.Entities.WithdrawalRequest", b =>
                {
                    b.Navigation("WalletTransaction");
                });
#pragma warning restore 612, 618
        }
    }
}
